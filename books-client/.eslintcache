[{"C:\\Users\\User\\Desktop\\task2\\books-client\\src\\components\\AddBook.js":"1","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\components\\Book.js":"2","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\components\\BooksList.js":"3","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\components\\AddPublisher.js":"4","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\services\\PublisherService.js":"5","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\http-common.js":"6","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\components\\PublishersList.js":"7","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\App.js":"8","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\index.js":"9","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\pages\\Home.js":"10","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\services\\BookService.js":"11"},{"size":6437,"mtime":1607302435404,"results":"12","hashOfConfig":"13"},{"size":7286,"mtime":1607096121118,"results":"14","hashOfConfig":"13"},{"size":5663,"mtime":1607302175917,"results":"15","hashOfConfig":"13"},{"size":3101,"mtime":1607090293232,"results":"16","hashOfConfig":"13"},{"size":518,"mtime":1607298556676,"results":"17","hashOfConfig":"13"},{"size":233,"mtime":1607353890521,"results":"18","hashOfConfig":"13"},{"size":3545,"mtime":1607095904896,"results":"19","hashOfConfig":"13"},{"size":1888,"mtime":1607093475699,"results":"20","hashOfConfig":"13"},{"size":478,"mtime":1606738902325,"results":"21","hashOfConfig":"13"},{"size":853,"mtime":1606912428704,"results":"22","hashOfConfig":"13"},{"size":542,"mtime":1607297489940,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"1brdunq",{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"27"},"C:\\Users\\User\\Desktop\\task2\\books-client\\src\\components\\AddBook.js",["53","54","55"],"import React, { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport BookDataService from \"../services/BookService\";\r\nimport PublisherDataService from \"../services/PublisherService\";\r\nimport Select from \"react-select\";\r\n\r\nconst AddBook = () => {\r\n  const { register, handleSubmit, errors, formState } = useForm();\r\n  const initialBookState = {\r\n    id: null,\r\n    title: \"\",\r\n    author: \"\",\r\n    rating: \"\",\r\n    pages: \"\",\r\n    language: \"\",\r\n    description: \"\",\r\n    publisher: \"\",\r\n    published: false,\r\n  };\r\n  const [book, setBook] = useState(initialBookState);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setBook({ ...book, [name]: value });\r\n  };\r\n\r\n  const saveBook = () => {\r\n    var data = {\r\n      title: book.title,\r\n      author: book.author,\r\n      rating: book.rating,\r\n      pages: book.pages,\r\n      language: book.language,\r\n      description: book.description,\r\n      publisher: \"\",\r\n      published: book.published,\r\n    };\r\n\r\n    BookDataService.create(data)\r\n      .then((response) => {\r\n        setBook({\r\n          id: response.data.id,\r\n          title: response.data.title,\r\n          author: response.data.author,\r\n          rating: response.data.rating,\r\n          pages: response.data.pages,\r\n          language: response.data.language,\r\n          description: response.data.description,\r\n          publisher: response.data.publisher,\r\n          published: response.data.published,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const onSubmit = () => {\r\n    if (formState.errors.data) return;\r\n    saveBook();\r\n  };\r\n\r\n  const newBook = () => {\r\n    setBook(initialBookState);\r\n    setSubmitted(false);\r\n  };\r\n  const [options, setOptions] = useState([]);\r\n  useEffect(() => {\r\n    getOptions();\r\n  }, []);\r\n\r\n  const getOptions = () => {\r\n    PublisherDataService.getDropDown()\r\n      .then((response) => {\r\n        setOptions(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  //const options = PublisherDataService.getDropDown();\r\n\r\n  return (\r\n    <form className=\"submit-form\" onSubmit={handleSubmit(onSubmit)}>\r\n      {submitted ? (\r\n        <div>\r\n          <h4>You submitted successfully!</h4>\r\n          <button className=\"btn btn-primary\" onClick={newBook}>\r\n            Add\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"text-center text-info\">Add Book</h1>\r\n          <hr />\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"title\">\r\n              Title<span className=\"text-danger\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              ref={register({ required: true })}\r\n              id=\"title\"\r\n              value={book.title}\r\n              onChange={handleInputChange}\r\n              name=\"title\"\r\n            />\r\n            <span className=\"text-danger\">\r\n              {errors.title && \"Title is required\"}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"author\">\r\n              Author<span className=\"text-danger\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"auth\"\r\n              value={book.author}\r\n              ref={register({ required: true })}\r\n              onChange={handleInputChange}\r\n              name=\"author\"\r\n            />\r\n            <span className=\"text-danger\">\r\n              {errors.author && \"Author is required\"}\r\n            </span>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"rating\">Rating</label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              ref={register({ min: 0, max: 5 })}\r\n              id=\"title\"\r\n              value={book.rating}\r\n              onChange={handleInputChange}\r\n              name=\"rating\"\r\n            />\r\n            <span className=\"text-danger\">\r\n              {errors.rating &&\r\n                \"Invalid number for rating. Add a number between 0 and 5.\"}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"pages\">\r\n              Pages<span className=\"text-danger\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              id=\"pages\"\r\n              ref={register({ min: 0, required: true })}\r\n              value={book.pages}\r\n              onChange={handleInputChange}\r\n              name=\"pages\"\r\n            />\r\n            <span className=\"text-danger\">\r\n              {errors.pages?.type == \"required\" && \"Pages is required\"}\r\n              {errors.pages?.type == \"min\" &&\r\n                \"Please add a positive number for pages.\"}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"language\">Language</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"language\"\r\n              value={book.language}\r\n              onChange={handleInputChange}\r\n              name=\"language\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"description\">Description</label>\r\n            <textarea\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Add a short description for this book.\"\r\n              id=\"description\"\r\n              value={book.description}\r\n              onChange={handleInputChange}\r\n              name=\"description\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <select className=\"form-control\">\r\n              {options.map(({ label, value }) => (\r\n                <option key={value} value={value}>\r\n                  {label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <br></br>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\nexport default AddBook;\r\n",["56","57"],"C:\\Users\\User\\Desktop\\task2\\books-client\\src\\components\\Book.js",["58","59"],"import React, { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport BookDataService from \"../services/BookService\";\r\n\r\nconst Book = (props) => {\r\n  const { register, handleSubmit, errors, formState } = useForm();\r\n  const initialBookState = {\r\n    id: null,\r\n    title: \"\",\r\n    author: \"\",\r\n    rating: \"\",\r\n    pages: \"\",\r\n    language: \"\",\r\n    description: \"\",\r\n    publisher: \"\",\r\n    published: false,\r\n  };\r\n  const [currentBook, setCurrentBook] = useState(initialBookState);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const getBook = (id) => {\r\n    BookDataService.get(id)\r\n      .then((response) => {\r\n        setCurrentBook(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBook(props.match.params.id);\r\n  }, [props.match.params.id]);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCurrentBook({ ...currentBook, [name]: value });\r\n  };\r\n\r\n  const updatePublished = (status) => {\r\n    var data = {\r\n      id: currentBook.id,\r\n      title: currentBook.title,\r\n      author: currentBook.author,\r\n      rating: currentBook.rating,\r\n      pages: currentBook.pages,\r\n      language: currentBook.language,\r\n      description: currentBook.description,\r\n      publisher: currentBook.publisher,\r\n      published: status,\r\n    };\r\n\r\n    BookDataService.update(currentBook.id, data)\r\n      .then((response) => {\r\n        setCurrentBook({ ...currentBook, published: status });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const updateBook = () => {\r\n    BookDataService.update(currentBook.id, currentBook)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setMessage(\"The book was updated successfully!\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const deleteBook = () => {\r\n    BookDataService.remove(currentBook.id)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        props.history.push(\"/books\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    if (formState.errors.data) return;\r\n    updateBook();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {currentBook ? (\r\n        <div className=\"edit-form\">\r\n          <h4>Book</h4>\r\n          <form className=\"submit-form\" onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"title\">\r\n                Title<span className=\"text-danger\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                ref={register({ required: true })}\r\n                id=\"title\"\r\n                name=\"title\"\r\n                value={currentBook.title}\r\n                onChange={handleInputChange}\r\n              />\r\n              <span className=\"text-danger\">\r\n                {errors.title && \"Title is required\"}\r\n              </span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"author\">\r\n                Author<span className=\"text-danger\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                ref={register({ required: true })}\r\n                id=\"author\"\r\n                name=\"author\"\r\n                value={currentBook.author}\r\n                onChange={handleInputChange}\r\n              />\r\n              <span className=\"text-danger\">\r\n                {errors.author && \"Author is required\"}\r\n              </span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"rating\">Rating</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                ref={register({ min: 0, max: 5 })}\r\n                id=\"rating\"\r\n                name=\"rating\"\r\n                value={currentBook.rating}\r\n                onChange={handleInputChange}\r\n              />\r\n              <span className=\"text-danger\">\r\n                {errors.rating &&\r\n                  \"Invalid number for rating. Add a number between 0 and 5.\"}\r\n              </span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"pages\">\r\n                Pages<span className=\"text-danger\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                ref={register({ min: 0, required: true })}\r\n                id=\"pages\"\r\n                name=\"pages\"\r\n                value={currentBook.pages}\r\n                onChange={handleInputChange}\r\n              />\r\n              <span className=\"text-danger\">\r\n                {errors.pages?.type == \"required\" && \"Pages is required\"}\r\n                {errors.pages?.type == \"min\" &&\r\n                  \"Please add a positive number for pages.\"}\r\n              </span>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"language\">language</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"language\"\r\n                name=\"language\"\r\n                value={currentBook.language}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"description\">Description</label>\r\n              <textarea\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"description\"\r\n                name=\"description\"\r\n                value={currentBook.description}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div htmlFor=\"publisher.id\">\r\n              <select className=\"form-control\">\r\n                <option>Please choose a publisher</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>\r\n                <strong>Status:</strong>\r\n              </label>\r\n              {currentBook.published ? \"Published\" : \"Pending\"}\r\n            </div>\r\n            {currentBook.published ? (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => updatePublished(false)}\r\n              >\r\n                UnPublish\r\n              </button>\r\n            ) : (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => updatePublished(true)}\r\n              >\r\n                Publish\r\n              </button>\r\n            )}\r\n\r\n            <button className=\"badge badge-danger mr-2\" onClick={deleteBook}>\r\n              Delete\r\n            </button>\r\n\r\n            <button type=\"submit\" className=\"badge badge-success\">\r\n              Update\r\n            </button>\r\n            <p>{message}</p>\r\n          </form>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <br />\r\n          <p>Please click on a Book...</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Book;\r\n","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\components\\BooksList.js",["60"],"import React, { useState, useEffect } from \"react\";\r\nimport BookDataService from \"../services/BookService\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Home from \"../pages/Home\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\n\r\nconst BooksList = () => {\r\n  const [books, setBooks] = useState([]);\r\n  const [currentBook, setCurrentBook] = useState(null);\r\n  const [currentIndex, setCurrentIndex] = useState(-1);\r\n\r\n  useEffect(() => {\r\n    retrieveBooks();\r\n  }, []);\r\n\r\n  const retrieveBooks = () => {\r\n    BookDataService.getAll()\r\n      .then((response) => {\r\n        setBooks(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const refreshList = () => {\r\n    retrieveBooks();\r\n    setCurrentBook(null);\r\n    setCurrentIndex(-1);\r\n  };\r\n\r\n  const setActiveBook = (book, index) => {\r\n    setCurrentBook(book);\r\n    setCurrentIndex(index);\r\n  };\r\n\r\n  const removeAllBooks = () => {\r\n    BookDataService.removeAll()\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        refreshList();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const columns = [\r\n    { dataField: \"id\", hidden: true },\r\n    {\r\n      dataField: \"title\",\r\n      text: \"Book Title\",\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"author\",\r\n      text: \"Author\",\r\n      sort: true,\r\n    },\r\n  ];\r\n\r\n  const tableRowEvents = {\r\n    onClick: (e, row, rowIndex) => {\r\n      console.log(`clicked on row with index: ${row.data}`);\r\n      setActiveBook(row, rowIndex);\r\n    },\r\n  };\r\n\r\n  const borderStyle = {\r\n    backgroundColor: \"white\",\r\n    padding: \"10px\",\r\n    borderRadius: \"5px\",\r\n  };\r\n\r\n  const { SearchBar } = Search;\r\n\r\n  return (\r\n    <div>\r\n      <Home />\r\n      <div className=\"jumbotron\">\r\n        <h2 className=\"text-info text-center\">Add, remove, update books.</h2>\r\n        <hr />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\"></div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <h4>The library's books</h4>\r\n              <ToolkitProvider\r\n                keyField=\"id\"\r\n                data={books}\r\n                columns={columns}\r\n                search\r\n              >\r\n                {(props) => (\r\n                  <div>\r\n                    <SearchBar {...props.searchProps} />\r\n                    <hr />\r\n                    <BootstrapTable\r\n                      {...props.baseProps}\r\n                      className=\"bg-white\"\r\n                      keyField=\"id\"\r\n                      rowEvents={tableRowEvents}\r\n                      striped\r\n                      hover\r\n                      condensed\r\n                    />\r\n                  </div>\r\n                )}\r\n              </ToolkitProvider>\r\n              <button\r\n                className=\"m-3 btn btn-sm btn-danger\"\r\n                onClick={removeAllBooks}\r\n              >\r\n                Remove All\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              {currentBook ? (\r\n                <div\r\n                  className=\"bg-white border border-info\"\r\n                  style={borderStyle}\r\n                >\r\n                  <h4>Book</h4>\r\n                  <hr />\r\n                  <div>\r\n                    <label>\r\n                      <strong>Title:</strong>\r\n                    </label>{\" \"}\r\n                    {currentBook.title}\r\n                  </div>\r\n                  <div>\r\n                    <label>\r\n                      <strong>Author:</strong>\r\n                    </label>{\" \"}\r\n                    {currentBook.author}\r\n                  </div>\r\n                  <div>\r\n                    <label>\r\n                      <strong>Rating:</strong>\r\n                    </label>{\" \"}\r\n                    {currentBook.rating}\r\n                  </div>\r\n                  <div>\r\n                    <label>\r\n                      <strong>Pages:</strong>\r\n                    </label>{\" \"}\r\n                    {currentBook.pages}\r\n                  </div>\r\n                  <div>\r\n                    <label>\r\n                      <strong>Language:</strong>\r\n                    </label>{\" \"}\r\n                    {currentBook.language}\r\n                  </div>\r\n                  <div>\r\n                    <label>\r\n                      <strong>Description:</strong>\r\n                    </label>{\" \"}\r\n                    {currentBook.description}\r\n                  </div>\r\n                  <div>\r\n                    <label>\r\n                      <strong>Publisher:</strong>\r\n                    </label>{\" \"}\r\n                    {currentBook.publisher}\r\n                  </div>\r\n                  <div>\r\n                    <label>\r\n                      <strong>Status:</strong>\r\n                    </label>{\" \"}\r\n                    {currentBook.published ? \"Published\" : \"Pending\"}\r\n                  </div>\r\n\r\n                  <Link\r\n                    to={\"/books/\" + currentBook.id}\r\n                    className=\"badge badge-warning\"\r\n                  >\r\n                    Edit\r\n                  </Link>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <br />\r\n                  <p>Please click on a Book...</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BooksList;\r\n","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\components\\AddPublisher.js",[],"C:\\Users\\User\\Desktop\\task2\\books-client\\src\\services\\PublisherService.js",["61"],"import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/publishers\");\r\n};\r\n\r\nconst getDropDown = () => {\r\n  return http.get(\"/publishersDropDown\");\r\n};\r\n\r\nconst get = (id) => {\r\n  return http.get(`/publishers/${id}`);\r\n};\r\n\r\nconst create = (data) => {\r\n  console.log(\"Erdhi ketu bucii\");\r\n  return http.post(\"/publishers\", data);\r\n};\r\n\r\nconst remove = (id) => {\r\n  return http.delete(`/publishers/${id}`);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  getDropDown,\r\n  get,\r\n  create,\r\n  remove,\r\n};\r\n","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\http-common.js",[],"C:\\Users\\User\\Desktop\\task2\\books-client\\src\\components\\PublishersList.js",["62","63"],"import React, { useState, useEffect } from \"react\";\r\nimport PublisherDataService from \"../services/PublisherService\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\n\r\nconst PublishersList = () => {\r\n  const [publishers, setPublishers] = useState([]);\r\n  const [currentPublisher, setCurrentPublisher] = useState(null);\r\n  const [currentIndex, setCurrentIndex] = useState(-1);\r\n\r\n  useEffect(() => {\r\n    retrievePublishers();\r\n  }, []);\r\n\r\n  const retrievePublishers = () => {\r\n    PublisherDataService.getAll()\r\n      .then((response) => {\r\n        setPublishers(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const refreshList = () => {\r\n    retrievePublishers();\r\n    setCurrentPublisher(null);\r\n    setCurrentIndex(-1);\r\n  };\r\n\r\n  const setActivePublisher = (publisher, index) => {\r\n    setCurrentPublisher(publisher);\r\n    setCurrentIndex(index);\r\n  };\r\n\r\n  const columns = [\r\n    { dataField: \"id\", hidden: true },\r\n    {\r\n      dataField: \"name\",\r\n      text: \"Publisher\",\r\n      sort: true,\r\n    },\r\n    {\r\n      dataField: \"location\",\r\n      text: \"Location\",\r\n      sort: true,\r\n    },\r\n  ];\r\n\r\n  const tableRowEvents = {\r\n    onClick: (e, row, rowIndex) => {\r\n      console.log(`clicked on row with index: ${row.data}`);\r\n      setActivePublisher(row, rowIndex);\r\n    },\r\n  };\r\n  const { SearchBar } = Search;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"jumbotron\">\r\n        <h2 className=\"text-info text-center\">Our Books' Publishers:</h2>\r\n        <hr />\r\n        <div className=\"list row\">\r\n          <div className=\"col-md-6\">\r\n            <h4>Publishers List</h4>\r\n\r\n            <ToolkitProvider\r\n              keyField=\"id\"\r\n              data={publishers}\r\n              columns={columns}\r\n              search\r\n            >\r\n              {(props) => (\r\n                <div>\r\n                  <SearchBar {...props.searchProps} />\r\n                  <hr />\r\n                  <BootstrapTable\r\n                    {...props.baseProps}\r\n                    className=\"bg-white\"\r\n                    keyField=\"id\"\r\n                    rowEvents={tableRowEvents}\r\n                    striped\r\n                    hover\r\n                    condensed\r\n                  />\r\n                </div>\r\n              )}\r\n            </ToolkitProvider>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            {currentPublisher ? (\r\n              <div>\r\n                <h4>Publisher</h4>\r\n                <div>\r\n                  <label>\r\n                    <strong>Name:</strong>\r\n                  </label>{\" \"}\r\n                  {currentPublisher.name}\r\n                </div>\r\n                <div>\r\n                  <label>\r\n                    <strong>Location:</strong>\r\n                  </label>{\" \"}\r\n                  {currentPublisher.location}\r\n                </div>\r\n                {/* <div>\r\n                  <label>\r\n                    <strong>Books:</strong>\r\n                  </label>{\" \"}\r\n                  {currentPublisher.books}\r\n                </div> */}\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <br />\r\n                <p>Please click on a Publisher...</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PublishersList;\r\n","C:\\Users\\User\\Desktop\\task2\\books-client\\src\\App.js",[],"C:\\Users\\User\\Desktop\\task2\\books-client\\src\\index.js",[],"C:\\Users\\User\\Desktop\\task2\\books-client\\src\\pages\\Home.js",[],"C:\\Users\\User\\Desktop\\task2\\books-client\\src\\services\\BookService.js",["64"],"import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/books/\");\r\n};\r\n\r\nconst get = (id) => {\r\n  return http.get(`/books/${id}`);\r\n};\r\n\r\nconst create = (data) => {\r\n  return http.post(\"/books/\", data);\r\n};\r\n\r\nconst update = (id, data) => {\r\n  return http.put(`/books/${id}`, data);\r\n};\r\n\r\nconst remove = (id) => {\r\n  return http.delete(`/books/${id}`);\r\n};\r\n\r\nconst removeAll = () => {\r\n  return http.delete(`/books/`);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  get,\r\n  create,\r\n  update,\r\n  remove,\r\n  removeAll,\r\n};\r\n",{"ruleId":"65","severity":1,"message":"66","line":5,"column":8,"nodeType":"67","messageId":"68","endLine":5,"endColumn":14},{"ruleId":"69","severity":1,"message":"70","line":166,"column":35,"nodeType":"71","messageId":"72","endLine":166,"endColumn":37},{"ruleId":"69","severity":1,"message":"70","line":167,"column":35,"nodeType":"71","messageId":"72","endLine":167,"endColumn":37},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"69","severity":1,"message":"70","line":161,"column":37,"nodeType":"71","messageId":"72","endLine":161,"endColumn":39},{"ruleId":"69","severity":1,"message":"70","line":162,"column":37,"nodeType":"71","messageId":"72","endLine":162,"endColumn":39},{"ruleId":"65","severity":1,"message":"77","line":12,"column":10,"nodeType":"67","messageId":"68","endLine":12,"endColumn":22},{"ruleId":"78","severity":1,"message":"79","line":24,"column":1,"nodeType":"80","endLine":30,"endColumn":3},{"ruleId":"65","severity":1,"message":"77","line":10,"column":10,"nodeType":"67","messageId":"68","endLine":10,"endColumn":22},{"ruleId":"65","severity":1,"message":"81","line":27,"column":9,"nodeType":"67","messageId":"68","endLine":27,"endColumn":20},{"ruleId":"78","severity":1,"message":"79","line":27,"column":1,"nodeType":"80","endLine":34,"endColumn":3},"no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["82"],"no-negated-in-lhs",["83"],"'currentIndex' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'refreshList' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]